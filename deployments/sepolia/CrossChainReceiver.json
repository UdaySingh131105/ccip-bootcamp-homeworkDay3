{
  "address": "0x88E2941d2349560e23Dd85518B1d4A579953C1c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ccipRouterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cometAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapTestnetUsdcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrorCase",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "MessageNotFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "sourceChainSelector",
          "type": "uint64"
        }
      ],
      "name": "SourceChainNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "MessageRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_sourceChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistSourceChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "allowlistedSenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAllowlisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelecotor",
          "type": "uint64"
        }
      ],
      "name": "allowlistedSourceChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAllowlisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "any2EvmMessage",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFailedMessagesIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "ids",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "any2EvmMessage",
          "type": "tuple"
        }
      ],
      "name": "processMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenReceiver",
          "type": "address"
        }
      ],
      "name": "retryFailedMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "s_messageContents",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "sourceChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "simRevert",
          "type": "bool"
        }
      ],
      "name": "setSimRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99badb32dcfd75725e7a88fd02a4e64713e034d3d5432413ea7ad0e9bb65ff77",
  "receipt": {
    "to": null,
    "from": "0x0FE374673c61690D1f4Ea90706281b2Ab2fD1890",
    "contractAddress": "0x88E2941d2349560e23Dd85518B1d4A579953C1c1",
    "transactionIndex": 46,
    "gasUsed": "3217837",
    "logsBloom": "0x
    "blockHash": "0x1fcbee0397f646665a1ce8ffa1a02e6b1e55e8c15c05ec144bb30ae718b085fb",
    "transactionHash": "0x99badb32dcfd75725e7a88fd02a4e64713e034d3d5432413ea7ad0e9bb65ff77",
    "logs": [],
    "blockNumber": 6521015,
    "cumulativeGasUsed": "13099871",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59",
    "0xAec1F48e02Cfb822Be958B68C7957156EB3F0b6e",
    "0xDc158015B34cCE880b2C0890C71cc69D16573a5f"
  ],
  "numDeployments": 1,
  "solcInputHash": "f5488efdde43beecb8022ef0e36cb982",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ccipRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cometAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTestnetUsdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorCase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageNotFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"SourceChainNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"allowlistSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"allowlistSourceChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"allowlistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowlisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelecotor\",\"type\":\"uint64\"}],\"name\":\"allowlistedSourceChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowlisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"any2EvmMessage\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFailedMessagesIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"any2EvmMessage\",\"type\":\"tuple\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"retryFailedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"s_messageContents\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"simRevert\",\"type\":\"bool\"}],\"name\":\"setSimRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowlistSender(address,bool)\":{\"details\":\"Updates the allowlist status of a sender for transactions.\",\"params\":{\"_allowed\":\"The allowlist status to be set for the sender.\",\"_sender\":\"The address of the sender to be updated.\"}},\"allowlistSourceChain(uint64,bool)\":{\"details\":\"Updates the allowlist status of a source chain\",\"params\":{\"_allowed\":\"The allowlist status to be set for the source chain.\",\"_sourceChainSelector\":\"The selector of the source chain to be updated.\"}},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Extremely important to ensure only router calls this.\",\"params\":{\"any2EvmMessage\":\"The message to process.\"}},\"getFailedMessagesIds()\":{\"details\":\"Iterates over the `s_failedMessages` map, collecting all keys.\",\"returns\":{\"ids\":\"An array of bytes32 containing the IDs of failed messages from the `s_failedMessages` map.\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Transfers specified token amounts to the owner of this contract. This function must be external because of the  try/catch for error handling. It uses the `onlySelf`: can only be called from the contract.\",\"params\":{\"any2EvmMessage\":\"Received CCIP message.\"}},\"retryFailedMessage(bytes32,address)\":{\"details\":\"This function is only callable by the contract owner. It changes the status of the message from 'failed' to 'resolved' to prevent reentry and multiple retries of the same message.\",\"params\":{\"messageId\":\"The unique identifier of the failed message.\",\"tokenReceiver\":\"The address to which the tokens will be sent.\"}},\"setSimRevert(bool)\":{\"details\":\"This function is only callable by the contract owner.\",\"params\":{\"simRevert\":\"If `true`, simulates a revert condition; if `false`, disables the simulation.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"allowlistSender(address,bool)\":{\"notice\":\"This function can only be called by the owner.\"},\"allowlistSourceChain(uint64,bool)\":{\"notice\":\"This function can only be called by the owner.\"},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"The entrypoint for the CCIP router to call. This function should never revert, all errors should be handled internally in this contract.\"},\"getFailedMessagesIds()\":{\"notice\":\"Retrieves the IDs of failed messages from the `s_failedMessages` map.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Serves as the entry point for this contract to process incoming messages.\"},\"retryFailedMessage(bytes32,address)\":{\"notice\":\"Allows the owner to retry a failed message in order to unblock the associated tokens.\"},\"setSimRevert(bool)\":{\"notice\":\"Allows the owner to toggle simulation of reversion for testing purposes.\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossChainReceiver.sol\":\"CrossChainReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcf5d0a5cd6ed0f6a9ed721b3e532c0504ed1ba3ab6d3567165876ceb4f23b084\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"../../ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\",\"keccak256\":\"0x010d0a67d81c4020004f72d95e8a7b08b98178de026e96565f315806e7525ada\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0xca8a1e219f7a427d02b93efd7a4f9ecd76a2e6776b5e196df0a5e4ccc175187b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\",\"keccak256\":\"0xd1668d9229b21a4630535ca2100c61e4a2905ea7e4e6077c27dfd1caa7d467ef\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\",\"keccak256\":\"0xf77cae3ecd8776056d3d2ceb7b6958d757c6a9825b58665f82d38dbec2f695e5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Map type with\\n  // bytes32 keys and values.\\n  // The Map implementation uses private functions, and user-facing\\n  // implementations (such as Uint256ToAddressMap) are just wrappers around\\n  // the underlying Map.\\n  // This means that we can only create new EnumerableMaps for types that fit\\n  // in bytes32.\\n\\n  struct Bytes32ToBytes32Map {\\n    // Storage of keys\\n    EnumerableSet.Bytes32Set _keys;\\n    mapping(bytes32 => bytes32) _values;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    Bytes32ToBytes32Map storage map,\\n    bytes32 key,\\n    bytes32 value\\n  ) internal returns (bool) {\\n    map._values[key] = value;\\n    return map._keys.add(key);\\n  }\\n\\n  /**\\n   * @dev Removes a key-value pair from a map. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n    delete map._values[key];\\n    return map._keys.remove(key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n    return map._keys.contains(key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of key-value pairs in the map. O(1).\\n   */\\n  function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n    return map._keys.length();\\n  }\\n\\n  /**\\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of entries inside the\\n   * array, and it may change when more entries are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n    bytes32 key = map._keys.at(index);\\n    return (key, map._values[key]);\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n    bytes32 value = map._values[key];\\n    if (value == bytes32(0)) {\\n      return (contains(map, key), bytes32(0));\\n    } else {\\n      return (true, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    Bytes32ToBytes32Map storage map,\\n    bytes32 key,\\n    string memory errorMessage\\n  ) internal view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    require(value != 0 || contains(map, key), errorMessage);\\n    return value;\\n  }\\n\\n  // UintToUintMap\\n\\n  struct UintToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    UintToUintMap storage map,\\n    uint256 key,\\n    uint256 value\\n  ) internal returns (bool) {\\n    return set(map._inner, bytes32(key), bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n    return remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(UintToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (uint256(key), uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(key)));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    UintToUintMap storage map,\\n    uint256 key,\\n    string memory errorMessage\\n  ) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(key), errorMessage));\\n  }\\n\\n  // UintToAddressMap\\n\\n  struct UintToAddressMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    UintToAddressMap storage map,\\n    uint256 key,\\n    address value\\n  ) internal returns (bool) {\\n    return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n    return remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(UintToAddressMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (uint256(key), address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n    return (success, address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n    return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    UintToAddressMap storage map,\\n    uint256 key,\\n    string memory errorMessage\\n  ) internal view returns (address) {\\n    return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n  }\\n\\n  // AddressToUintMap\\n\\n  struct AddressToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    AddressToUintMap storage map,\\n    address key,\\n    uint256 value\\n  ) internal returns (bool) {\\n    return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n    return remove(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(AddressToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (address(uint160(uint256(key))), uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    AddressToUintMap storage map,\\n    address key,\\n    string memory errorMessage\\n  ) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n  }\\n\\n  // Bytes32ToUintMap\\n\\n  struct Bytes32ToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    Bytes32ToUintMap storage map,\\n    bytes32 key,\\n    uint256 value\\n  ) internal returns (bool) {\\n    return set(map._inner, key, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n    return remove(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n    return contains(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (key, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, key);\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n    return uint256(get(map._inner, key));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    Bytes32ToUintMap storage map,\\n    bytes32 key,\\n    string memory errorMessage\\n  ) internal view returns (uint256) {\\n    return uint256(get(map._inner, key, errorMessage));\\n  }\\n}\",\"keccak256\":\"0x68fb09424d69c771ebaeb5a425bcbdbb0725a236c0d83d517992b6f44bd7198d\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    bytes32[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\",\"keccak256\":\"0xa7a4cdd312769aad895841037e16a97caccb0eb0125b4543bec4d2f5f23ade25\",\"license\":\"MIT\"},\"contracts/CrossChainReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {OwnerIsCreator} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\\\";\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {EnumerableMap} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/structs/EnumerableMap.sol\\\";\\n\\ninterface CometMainInterface {\\n    function supply(address asset, uint amount) external;\\n}\\n\\ninterface ISwapTestnetUSDC {\\n    function swap(address tokenIn, address tokenOut, uint256 amount) external;\\n\\n    function getSupportedTokens()\\n        external\\n        view\\n        returns (address usdcToken, address compoundUsdcToken);\\n}\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\ncontract CrossChainReceiver is CCIPReceiver, OwnerIsCreator {\\n    using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n    using SafeERC20 for IERC20;\\n\\n    // Example error code, could have many different error codes.\\n    enum ErrorCode {\\n        // RESOLVED is first so that the default value is resolved.\\n        RESOLVED,\\n        // Could have any number of error codes here.\\n        BASIC\\n    }\\n\\n    error SourceChainNotAllowed(uint64 sourceChainSelector); // Used when the source chain has not been allowlisted by the contract owner.\\n    error SenderNotAllowed(address sender); // Used when the sender has not been allowlisted by the contract owner.\\n    error OnlySelf(); // Used when a function is called outside of the contract itself.\\n    error ErrorCase(); // Used when simulating a revert during message processing.\\n    error MessageNotFailed(bytes32 messageId);\\n\\n    CometMainInterface internal immutable i_comet;\\n    ISwapTestnetUSDC internal immutable i_swapTestnetUsdc;\\n\\n    // This is used to simulate a revert in the processMessage function.\\n    bool internal s_simRevert = false;\\n\\n    // Contains failed messages and their state.\\n    EnumerableMap.Bytes32ToUintMap internal s_failedMessages;\\n\\n    // Mapping to keep track of allowlisted source chains.\\n    mapping(uint64 chainSelecotor => bool isAllowlisted)\\n        public allowlistedSourceChains;\\n\\n    // Mapping to keep track of allowlisted senders.\\n    mapping(address sender => bool isAllowlisted) public allowlistedSenders;\\n\\n    // Mapping to keep track of the message contents of failed messages.\\n    mapping(bytes32 messageId => Client.Any2EVMMessage contents)\\n        public s_messageContents;\\n\\n    event MessageFailed(bytes32 indexed messageId, bytes reason);\\n    event MessageRecovered(bytes32 indexed messageId);\\n\\n    constructor(\\n        address ccipRouterAddress,\\n        address cometAddress,\\n        address swapTestnetUsdcAddress\\n    ) CCIPReceiver(ccipRouterAddress) {\\n        i_comet = CometMainInterface(cometAddress);\\n        i_swapTestnetUsdc = ISwapTestnetUSDC(swapTestnetUsdcAddress);\\n    }\\n\\n    /// @dev Modifier that checks if the chain with the given sourceChainSelector is allowlisted and if the sender is allowlisted.\\n    /// @param _sourceChainSelector The selector of the destination chain.\\n    /// @param _sender The address of the sender.\\n    modifier onlyAllowlisted(uint64 _sourceChainSelector, address _sender) {\\n        if (!allowlistedSourceChains[_sourceChainSelector])\\n            revert SourceChainNotAllowed(_sourceChainSelector);\\n        if (!allowlistedSenders[_sender]) revert SenderNotAllowed(_sender);\\n        _;\\n    }\\n\\n    // @dev Modifier to allow only the contract itself to execute a function.\\n    /// Throws an exception if called by any account other than the contract itself.\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) revert OnlySelf();\\n        _;\\n    }\\n\\n    /// @dev Updates the allowlist status of a source chain\\n    /// @notice This function can only be called by the owner.\\n    /// @param _sourceChainSelector The selector of the source chain to be updated.\\n    /// @param _allowed The allowlist status to be set for the source chain.\\n    function allowlistSourceChain(\\n        uint64 _sourceChainSelector,\\n        bool _allowed\\n    ) external onlyOwner {\\n        allowlistedSourceChains[_sourceChainSelector] = _allowed;\\n    }\\n\\n    /// @dev Updates the allowlist status of a sender for transactions.\\n    /// @notice This function can only be called by the owner.\\n    /// @param _sender The address of the sender to be updated.\\n    /// @param _allowed The allowlist status to be set for the sender.\\n    function allowlistSender(\\n        address _sender,\\n        bool _allowed\\n    ) external onlyOwner {\\n        allowlistedSenders[_sender] = _allowed;\\n    }\\n\\n    /// @notice The entrypoint for the CCIP router to call. This function should\\n    /// never revert, all errors should be handled internally in this contract.\\n    /// @param any2EvmMessage The message to process.\\n    /// @dev Extremely important to ensure only router calls this.\\n    function ccipReceive(\\n        Client.Any2EVMMessage calldata any2EvmMessage\\n    )\\n        external\\n        override\\n        onlyRouter\\n        onlyAllowlisted(\\n            any2EvmMessage.sourceChainSelector,\\n            abi.decode(any2EvmMessage.sender, (address))\\n        ) // Make sure the source chain and sender are allowlisted\\n    {\\n        /* solhint-disable no-empty-blocks */\\n        try this.processMessage(any2EvmMessage) {\\n            // Intentionally empty in this example; no action needed if processMessage succeeds\\n        } catch (bytes memory err) {\\n            // Could set different error codes based on the caught error. Each could be\\n            // handled differently.\\n            s_failedMessages.set(\\n                any2EvmMessage.messageId,\\n                uint256(ErrorCode.BASIC)\\n            );\\n            s_messageContents[any2EvmMessage.messageId] = any2EvmMessage;\\n            // Don't revert so CCIP doesn't revert. Emit event instead.\\n            // The message can be retried later without having to do manual execution of CCIP.\\n            emit MessageFailed(any2EvmMessage.messageId, err);\\n            return;\\n        }\\n    }\\n\\n    /// @notice Serves as the entry point for this contract to process incoming messages.\\n    /// @param any2EvmMessage Received CCIP message.\\n    /// @dev Transfers specified token amounts to the owner of this contract. This function\\n    /// must be external because of the  try/catch for error handling.\\n    /// It uses the `onlySelf`: can only be called from the contract.\\n    function processMessage(\\n        Client.Any2EVMMessage calldata any2EvmMessage\\n    )\\n        external\\n        onlySelf\\n        onlyAllowlisted(\\n            any2EvmMessage.sourceChainSelector,\\n            abi.decode(any2EvmMessage.sender, (address))\\n        ) // Make sure the source chain and sender are allowlisted\\n    {\\n        // Simulate a revert for testing purposes\\n        if (s_simRevert) revert ErrorCase();\\n\\n        _ccipReceive(any2EvmMessage); // process the message - may revert as well\\n    }\\n\\n    /// @notice Allows the owner to retry a failed message in order to unblock the associated tokens.\\n    /// @param messageId The unique identifier of the failed message.\\n    /// @param tokenReceiver The address to which the tokens will be sent.\\n    /// @dev This function is only callable by the contract owner. It changes the status of the message\\n    /// from 'failed' to 'resolved' to prevent reentry and multiple retries of the same message.\\n    function retryFailedMessage(\\n        bytes32 messageId,\\n        address tokenReceiver\\n    ) external onlyOwner {\\n        // Check if the message has failed; if not, revert the transaction.\\n        if (s_failedMessages.get(messageId) != uint256(ErrorCode.BASIC))\\n            revert MessageNotFailed(messageId);\\n\\n        // Set the error code to RESOLVED to disallow reentry and multiple retries of the same failed message.\\n        s_failedMessages.set(messageId, uint256(ErrorCode.RESOLVED));\\n\\n        // Retrieve the content of the failed message.\\n        Client.Any2EVMMessage memory message = s_messageContents[messageId];\\n\\n        // This example expects one token to have been sent, but you can handle multiple tokens.\\n        // Transfer the associated tokens to the specified receiver as an escape hatch.\\n        IERC20(message.destTokenAmounts[0].token).safeTransfer(\\n            tokenReceiver,\\n            message.destTokenAmounts[0].amount\\n        );\\n\\n        // Emit an event indicating that the message has been recovered.\\n        emit MessageRecovered(messageId);\\n    }\\n\\n    /// @notice Allows the owner to toggle simulation of reversion for testing purposes.\\n    /// @param simRevert If `true`, simulates a revert condition; if `false`, disables the simulation.\\n    /// @dev This function is only callable by the contract owner.\\n    function setSimRevert(bool simRevert) external onlyOwner {\\n        s_simRevert = simRevert;\\n    }\\n\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory any2EvmMessage\\n    ) internal override {\\n        address usdcToken = any2EvmMessage.destTokenAmounts[0].token;\\n        (, address compoundUsdcToken) = i_swapTestnetUsdc.getSupportedTokens();\\n        uint256 amount = any2EvmMessage.destTokenAmounts[0].amount;\\n\\n        IERC20(usdcToken).approve(address(i_swapTestnetUsdc), amount);\\n\\n        // Swap actual testnet USDC for Compound V3's version of USDC test token.\\n        // This step is neccessary on testnets only!\\n        i_swapTestnetUsdc.swap(usdcToken, compoundUsdcToken, amount);\\n\\n        IERC20(compoundUsdcToken).approve(address(i_comet), amount);\\n\\n        i_comet.supply(compoundUsdcToken, amount);\\n    }\\n\\n    /**\\n     * @notice Retrieves the IDs of failed messages from the `s_failedMessages` map.\\n     * @dev Iterates over the `s_failedMessages` map, collecting all keys.\\n     * @return ids An array of bytes32 containing the IDs of failed messages from the `s_failedMessages` map.\\n     */\\n    function getFailedMessagesIds()\\n        external\\n        view\\n        returns (bytes32[] memory ids)\\n    {\\n        uint256 length = s_failedMessages.length();\\n        bytes32[] memory allKeys = new bytes32[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            (bytes32 key, ) = s_failedMessages.at(i);\\n            allKeys[i] = key;\\n        }\\n        return allKeys;\\n    }\\n}\\n\",\"keccak256\":\"0xda7d78592a367dd4254b775e32fb1e28dcca078cfaf24d1d24d5962391595b71\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806385572ffb11610097578063d0d1fc3d11610066578063d0d1fc3d1461025e578063db04fa4914610291578063eab5b02c146102ad578063f2fde38b146102c9576100f5565b806385572ffb146101ea5780638da5cb5b14610206578063b0f479a114610224578063cf6730f814610242576100f5565b806352f813c3116100d357806352f813c3146101765780636159ada11461019257806368f9a9cc146101c257806379ba5097146101e0576100f5565b806301ffc9a7146100fa578063369f7f661461012a5780634030d52114610146575b600080fd5b610114600480360381019061010f9190611c94565b6102e5565b6040516101219190611cdc565b60405180910390f35b610144600480360381019061013f9190611d8b565b6103b7565b005b610160600480360381019061015b9190611e0b565b610736565b60405161016d9190611cdc565b60405180910390f35b610190600480360381019061018b9190611e64565b610756565b005b6101ac60048036038101906101a79190611e91565b61077b565b6040516101b99190611cdc565b60405180910390f35b6101ca61079b565b6040516101d79190611f7c565b60405180910390f35b6101e8610859565b005b61020460048036038101906101ff9190611fc2565b6109ee565b005b61020e610ce8565b60405161021b919061201a565b60405180910390f35b61022c610d11565b604051610239919061201a565b60405180910390f35b61025c60048036038101906102579190611fc2565b610d39565b005b61027860048036038101906102739190612035565b610f30565b6040516102889493929190612110565b60405180910390f35b6102ab60048036038101906102a69190612163565b611084565b005b6102c760048036038101906102c291906121a3565b6110cf565b005b6102e360048036038101906102de9190611e91565b611132565b005b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103b057507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6103bf611146565b6001808111156103d2576103d16121e3565b5b6103e68360026111d690919063ffffffff16565b1461042857816040517fb6e7826000000000000000000000000000000000000000000000000000000000815260040161041f9190612212565b60405180910390fd5b61045182600060018111156104405761043f6121e3565b5b60026111f09092919063ffffffff16565b506000600760008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820180546104be9061225c565b80601f01602080910402602001604051908101604052809291908181526020018280546104ea9061225c565b80156105375780601f1061050c57610100808354040283529160200191610537565b820191906000526020600020905b81548152906001019060200180831161051a57829003601f168201915b505050505081526020016003820180546105509061225c565b80601f016020809104026020016040519081016040528092919081815260200182805461057c9061225c565b80156105c95780601f1061059e576101008083540402835291602001916105c9565b820191906000526020600020905b8154815290600101906020018083116105ac57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561068957838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815260200190600101906105f7565b505050508152505090506107048282608001516000815181106106af576106ae61228d565b5b60200260200101516020015183608001516000815181106106d3576106d261228d565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1661120c9092919063ffffffff16565b827fef3bf8c64bc480286c4f3503b870ceb23e648d2d902e31fb7bb46680da6de8ad60405160405180910390a2505050565b60056020528060005260406000206000915054906101000a900460ff1681565b61075e611146565b80600160146101000a81548160ff02191690831515021790555050565b60066020528060005260406000206000915054906101000a900460ff1681565b606060006107a96002611292565b905060008167ffffffffffffffff8111156107c7576107c66122bc565b5b6040519080825280602002602001820160405280156107f55781602001602082028036833780820191505090505b50905060005b828110156108505760006108198260026112a790919063ffffffff16565b509050808383815181106108305761082f61228d565b5b60200260200101818152505050808061084890612324565b9150506107fb565b50809250505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e0906123c9565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a7e57336040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401610a75919061201a565b60405180910390fd5b806020016020810190610a919190611e0b565b818060400190610aa191906123f8565b810190610aae9190612499565b600560008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b2457816040517f213c2678000000000000000000000000000000000000000000000000000000008152600401610b1b91906124c6565b60405180910390fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610bb257806040517fd0d25976000000000000000000000000000000000000000000000000000000008152600401610ba9919061201a565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1663cf6730f8846040518263ffffffff1660e01b8152600401610beb9190612851565b600060405180830381600087803b158015610c0557600080fd5b505af1925050508015610c16575060015b610ce2573d8060008114610c46576040519150601f19603f3d011682016040523d82523d6000602084013e610c4b565b606091505b50610c788460000135600180811115610c6757610c666121e3565b5b60026111f09092919063ffffffff16565b508360076000866000013581526020019081526020016000208181610c9d9190613096565b90505083600001357f55bc02a9ef6f146737edeeb425738006f67f077e7138de3bf84a15bde1a5b56f82604051610cd491906130a4565b60405180910390a250610ce3565b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d9e576040517f14d4a4e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020016020810190610db19190611e0b565b818060400190610dc191906123f8565b810190610dce9190612499565b600560008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e4457816040517f213c2678000000000000000000000000000000000000000000000000000000008152600401610e3b91906124c6565b60405180910390fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ed257806040517fd0d25976000000000000000000000000000000000000000000000000000000008152600401610ec9919061201a565b60405180910390fd5b600160149054906101000a900460ff1615610f19576040517f79f79e0b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f2b83610f26906133bf565b6112d0565b505050565b60076020528060005260406000206000915090508060000154908060010160009054906101000a900467ffffffffffffffff1690806002018054610f739061225c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9f9061225c565b8015610fec5780601f10610fc157610100808354040283529160200191610fec565b820191906000526020600020905b815481529060010190602001808311610fcf57829003601f168201915b5050505050908060030180546110019061225c565b80601f016020809104026020016040519081016040528092919081815260200182805461102d9061225c565b801561107a5780601f1061104f5761010080835404028352916020019161107a565b820191906000526020600020905b81548152906001019060200180831161105d57829003601f168201915b5050505050905084565b61108c611146565b80600560008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6110d7611146565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b61113a611146565b61114381611613565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cb9061341e565b60405180910390fd5b565b60006111e5836000018361173f565b60001c905092915050565b600061120384600001848460001b6117bb565b90509392505050565b61128d8363a9059cbb60e01b848460405160240161122b92919061344d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117f6565b505050565b60006112a0826000016118bd565b9050919050565b6000806000806112ba86600001866118d2565b91509150818160001c9350935050509250929050565b600081608001516000815181106112ea576112e961228d565b5b602002602001015160000151905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d3c7c2c76040518163ffffffff1660e01b81526004016040805180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611388919061348b565b915050600083608001516000815181106113a5576113a461228d565b5b60200260200101516020015190508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161140e92919061344d565b6020604051808303816000875af115801561142d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145191906134e0565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663df791e508484846040518463ffffffff1660e01b81526004016114af9392919061350d565b600060405180830381600087803b1580156114c957600080fd5b505af11580156114dd573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161153c92919061344d565b6020604051808303816000875af115801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f91906134e0565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2b9fdb883836040518363ffffffff1660e01b81526004016115db92919061344d565b600060405180830381600087803b1580156115f557600080fd5b505af1158015611609573d6000803e3d6000fd5b5050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167890613590565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6000808360020160008481526020019081526020016000205490506000801b8114158061177257506117718484611912565b5b6117b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a8906135fc565b60405180910390fd5b8091505092915050565b600081846002016000858152602001908152602001600020819055506117ed838560000161193290919063ffffffff16565b90509392505050565b6000611858826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119499092919063ffffffff16565b90506000815111156118b8578080602001905181019061187891906134e0565b6118b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ae9061368e565b60405180910390fd5b5b505050565b60006118cb82600001611961565b9050919050565b60008060006118ed848660000161197690919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b600061192a828460000161198d90919063ffffffff16565b905092915050565b600061194183600001836119a4565b905092915050565b60606119588484600085611a14565b90509392505050565b600061196f82600001611ae1565b9050919050565b60006119858360000183611af2565b905092915050565b600061199c8360000183611b1d565b905092915050565b60006119b08383611b1d565b611a09578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611a0e565b600090505b92915050565b606082471015611a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5090613720565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a82919061377c565b60006040518083038185875af1925050503d8060008114611abf576040519150601f19603f3d011682016040523d82523d6000602084013e611ac4565b606091505b5091509150611ad587838387611b40565b92505050949350505050565b600081600001805490509050919050565b6000826000018281548110611b0a57611b0961228d565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60608315611ba2576000835103611b9a57611b5a85611bb5565b611b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b90906137df565b60405180910390fd5b5b829050611bad565b611bac8383611bd8565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611beb5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1f9190613843565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611c7181611c3c565b8114611c7c57600080fd5b50565b600081359050611c8e81611c68565b92915050565b600060208284031215611caa57611ca9611c32565b5b6000611cb884828501611c7f565b91505092915050565b60008115159050919050565b611cd681611cc1565b82525050565b6000602082019050611cf16000830184611ccd565b92915050565b6000819050919050565b611d0a81611cf7565b8114611d1557600080fd5b50565b600081359050611d2781611d01565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d5882611d2d565b9050919050565b611d6881611d4d565b8114611d7357600080fd5b50565b600081359050611d8581611d5f565b92915050565b60008060408385031215611da257611da1611c32565b5b6000611db085828601611d18565b9250506020611dc185828601611d76565b9150509250929050565b600067ffffffffffffffff82169050919050565b611de881611dcb565b8114611df357600080fd5b50565b600081359050611e0581611ddf565b92915050565b600060208284031215611e2157611e20611c32565b5b6000611e2f84828501611df6565b91505092915050565b611e4181611cc1565b8114611e4c57600080fd5b50565b600081359050611e5e81611e38565b92915050565b600060208284031215611e7a57611e79611c32565b5b6000611e8884828501611e4f565b91505092915050565b600060208284031215611ea757611ea6611c32565b5b6000611eb584828501611d76565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ef381611cf7565b82525050565b6000611f058383611eea565b60208301905092915050565b6000602082019050919050565b6000611f2982611ebe565b611f338185611ec9565b9350611f3e83611eda565b8060005b83811015611f6f578151611f568882611ef9565b9750611f6183611f11565b925050600181019050611f42565b5085935050505092915050565b60006020820190508181036000830152611f968184611f1e565b905092915050565b600080fd5b600060a08284031215611fb957611fb8611f9e565b5b81905092915050565b600060208284031215611fd857611fd7611c32565b5b600082013567ffffffffffffffff811115611ff657611ff5611c37565b5b61200284828501611fa3565b91505092915050565b61201481611d4d565b82525050565b600060208201905061202f600083018461200b565b92915050565b60006020828403121561204b5761204a611c32565b5b600061205984828501611d18565b91505092915050565b61206b81611cf7565b82525050565b61207a81611dcb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120ba57808201518184015260208101905061209f565b60008484015250505050565b6000601f19601f8301169050919050565b60006120e282612080565b6120ec818561208b565b93506120fc81856020860161209c565b612105816120c6565b840191505092915050565b60006080820190506121256000830187612062565b6121326020830186612071565b818103604083015261214481856120d7565b9050818103606083015261215881846120d7565b905095945050505050565b6000806040838503121561217a57612179611c32565b5b600061218885828601611df6565b925050602061219985828601611e4f565b9150509250929050565b600080604083850312156121ba576121b9611c32565b5b60006121c885828601611d76565b92505060206121d985828601611e4f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020820190506122276000830184612062565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061227457607f821691505b6020821081036122875761228661222d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061232f8261231a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612361576123606122eb565b5b600182019050919050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006123b360168361236c565b91506123be8261237d565b602082019050919050565b600060208201905081810360008301526123e2816123a6565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612415576124146123e9565b5b80840192508235915067ffffffffffffffff821115612437576124366123ee565b5b602083019250600182023603831315612453576124526123f3565b5b509250929050565b600061246682611d2d565b9050919050565b6124768161245b565b811461248157600080fd5b50565b6000813590506124938161246d565b92915050565b6000602082840312156124af576124ae611c32565b5b60006124bd84828501612484565b91505092915050565b60006020820190506124db6000830184612071565b92915050565b60006124f06020840184611d18565b905092915050565b60006125076020840184611df6565b905092915050565b61251881611dcb565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261254a57612549612528565b5b83810192508235915060208301925067ffffffffffffffff8211156125725761257161251e565b5b60018202360383131561258857612587612523565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b60006125bc8385612590565b93506125c98385846125a1565b6125d2836120c6565b840190509392505050565b600080833560016020038436030381126125fa576125f9612528565b5b83810192508235915060208301925067ffffffffffffffff8211156126225761262161251e565b5b60408202360383131561263857612637612523565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b600061266a6020840184611d76565b905092915050565b61267b81611d4d565b82525050565b61268a8161231a565b811461269557600080fd5b50565b6000813590506126a781612681565b92915050565b60006126bc6020840184612698565b905092915050565b6126cd8161231a565b82525050565b604082016126e4600083018361265b565b6126f16000850182612672565b506126ff60208301836126ad565b61270c60208501826126c4565b50505050565b600061271e83836126d3565b60408301905092915050565b600082905092915050565b6000604082019050919050565b600061274e8385612640565b935061275982612651565b8060005b858110156127925761276f828461272a565b6127798882612712565b975061278483612735565b92505060018101905061275d565b5085925050509392505050565b600060a083016127b260008401846124e1565b6127bf6000860182611eea565b506127cd60208401846124f8565b6127da602086018261250f565b506127e8604084018461252d565b85830360408701526127fb8382846125b0565b9250505061280c606084018461252d565b858303606087015261281f8382846125b0565b9250505061283060808401846125dd565b8583036080870152612843838284612742565b925050508091505092915050565b6000602082019050818103600083015261286b818461279f565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b600081356128af81611d01565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6128f1846128b8565b9350801983169250808416831791505092915050565b600061291282611cf7565b9050919050565b60008160001c9050919050565b600061293182612919565b9050919050565b61294182612907565b61295461294d82612926565b83546128c5565b8255505050565b6000813561296881611ddf565b80915050919050565b600067ffffffffffffffff612985846128b8565b9350801983169250808416831791505092915050565b6000819050919050565b60006129c06129bb6129b684611dcb565b61299b565b611dcb565b9050919050565b6000819050919050565b6129da826129a5565b6129ed6129e6826129c7565b8354612971565b8255505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a24565b612a6b8683612a24565b95508019841693508086168417925050509392505050565b6000612a9e612a99612a948461231a565b61299b565b61231a565b9050919050565b6000819050919050565b612ab883612a83565b612acc612ac482612aa5565b848454612a31565b825550505050565b600090565b612ae1612ad4565b612aec818484612aaf565b505050565b5b81811015612b1057612b05600082612ad9565b600181019050612af2565b5050565b601f821115612b5557612b26816129ff565b612b2f84612a14565b81016020851015612b3e578190505b612b52612b4a85612a14565b830182612af1565b50505b505050565b600082821c905092915050565b6000612b7860001984600802612b5a565b1980831691505092915050565b6000612b918383612b67565b9150826002028217905092915050565b612bab83836129f4565b67ffffffffffffffff811115612bc457612bc36122bc565b5b612bce825461225c565b612bd9828285612b14565b6000601f831160018114612c085760008415612bf6578287013590505b612c008582612b85565b865550612c68565b601f198416612c16866129ff565b60005b82811015612c3e57848901358255600182019150602085019450602081019050612c19565b86831015612c5b5784890135612c57601f891682612b67565b8355505b6001600288020188555050505b50505050505050565b612c7c838383612ba1565b505050565b60008083356001602003843603038112612c9e57612c9d6123e9565b5b80840192508235915067ffffffffffffffff821115612cc057612cbf6123ee565b5b602083019250604082023603831315612cdc57612cdb6123f3565b5b509250929050565b600081549050919050565b6000612cfa8261231a565b9150612d058361231a565b9250828202612d138161231a565b91508282048414831517612d2a57612d296122eb565b5b5092915050565b6000819050612d41826002612cef565b9050919050565b60008190508160005260206000209050919050565b600080820155612d71600060018301612ad9565b50565b60008214612d8557612d84612873565b5b612d8e81612d5d565b5050565b5b81811015612db157612da6600082612d74565b600281019050612d93565b5050565b81831015612dee57612dc682612d31565b612dcf84612d31565b612dd883612d48565b818101838201612de88183612d92565b50505050505b505050565b68010000000000000000821115612e0d57612e0c6122bc565b5b612e1681612ce4565b828255612e24838284612db5565b505050565b600082905092915050565b60008135612e4181611d5f565b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff612e6a846128b8565b9350801983169250808416831791505092915050565b6000612e9b612e96612e9184611d2d565b61299b565b611d2d565b9050919050565b6000612ead82612e80565b9050919050565b6000612ebf82612ea2565b9050919050565b6000819050919050565b612ed982612eb4565b612eec612ee582612ec6565b8354612e4a565b8255505050565b60008135612f0081612681565b80915050919050565b612f1282612a83565b612f25612f1e82612aa5565b83546128c5565b8255505050565b600081016000830180612f3e81612e34565b9050612f4a8184612ed0565b505050600181016020830180612f5f81612ef3565b9050612f6b8184612f09565b5050505050565b612f7c8282612f2c565b5050565b612f8a8383612e29565b612f948183612df3565b612f9d83612651565b612fa683612d48565b60005b83811015612fd45782612fbc8184612f72565b60408401935060028301925050600181019050612fa9565b50505050505050565b612fe8838383612f80565b505050565b600081016000830180612fff816128a2565b905061300b8184612938565b5050506001810160208301806130208161295b565b905061302c81846129d1565b505050600281016040830161304181856123f8565b61304c818386612c71565b50505050600381016060830161306281856123f8565b61306d818386612c71565b5050505060048101608083016130838185612c81565b61308e818386612fdd565b505050505050565b6130a08282612fed565b5050565b600060208201905081810360008301526130be81846120d7565b905092915050565b600080fd5b6130d4826120c6565b810181811067ffffffffffffffff821117156130f3576130f26122bc565b5b80604052505050565b6000613106611c28565b905061311282826130cb565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115613141576131406122bc565b5b61314a826120c6565b9050602081019050919050565b600061316a61316584613126565b6130fc565b90508281526020810184848401111561318657613185613121565b5b6131918482856125a1565b509392505050565b600082601f8301126131ae576131ad61311c565b5b81356131be848260208601613157565b91505092915050565b600067ffffffffffffffff8211156131e2576131e16122bc565b5b602082029050602081019050919050565b600080fd5b60006040828403121561320e5761320d6130c6565b5b61321860406130fc565b9050600061322884828501611d76565b600083015250602061323c84828501612698565b60208301525092915050565b600061325b613256846131c7565b6130fc565b9050808382526020820190506040840283018581111561327e5761327d6131f3565b5b835b818110156132a7578061329388826131f8565b845260208401935050604081019050613280565b5050509392505050565b600082601f8301126132c6576132c561311c565b5b81356132d6848260208601613248565b91505092915050565b600060a082840312156132f5576132f46130c6565b5b6132ff60a06130fc565b9050600061330f84828501611d18565b600083015250602061332384828501611df6565b602083015250604082013567ffffffffffffffff81111561334757613346613117565b5b61335384828501613199565b604083015250606082013567ffffffffffffffff81111561337757613376613117565b5b61338384828501613199565b606083015250608082013567ffffffffffffffff8111156133a7576133a6613117565b5b6133b3848285016132b1565b60808301525092915050565b60006133cb36836132df565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b600061340860168361236c565b9150613413826133d2565b602082019050919050565b60006020820190508181036000830152613437816133fb565b9050919050565b6134478161231a565b82525050565b6000604082019050613462600083018561200b565b61346f602083018461343e565b9392505050565b60008151905061348581611d5f565b92915050565b600080604083850312156134a2576134a1611c32565b5b60006134b085828601613476565b92505060206134c185828601613476565b9150509250929050565b6000815190506134da81611e38565b92915050565b6000602082840312156134f6576134f5611c32565b5b6000613504848285016134cb565b91505092915050565b6000606082019050613522600083018661200b565b61352f602083018561200b565b61353c604083018461343e565b949350505050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061357a60178361236c565b915061358582613544565b602082019050919050565b600060208201905081810360008301526135a98161356d565b9050919050565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b60006135e6601e8361236c565b91506135f1826135b0565b602082019050919050565b60006020820190508181036000830152613615816135d9565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613678602a8361236c565b91506136838261361c565b604082019050919050565b600060208201905081810360008301526136a78161366b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061370a60268361236c565b9150613715826136ae565b604082019050919050565b60006020820190508181036000830152613739816136fd565b9050919050565b600081905092915050565b600061375682612080565b6137608185613740565b935061377081856020860161209c565b80840191505092915050565b6000613788828461374b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006137c9601d8361236c565b91506137d482613793565b602082019050919050565b600060208201905081810360008301526137f8816137bc565b9050919050565b600081519050919050565b6000613815826137ff565b61381f818561236c565b935061382f81856020860161209c565b613838816120c6565b840191505092915050565b6000602082019050818103600083015261385d818461380a565b90509291505056fea2646970667358221220db6dda377a2b4de70c0b4e74f7860edac21443f9090fab3b22dd6db242895be664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowlistSender(address,bool)": {
        "details": "Updates the allowlist status of a sender for transactions.",
        "params": {
          "_allowed": "The allowlist status to be set for the sender.",
          "_sender": "The address of the sender to be updated."
        }
      },
      "allowlistSourceChain(uint64,bool)": {
        "details": "Updates the allowlist status of a source chain",
        "params": {
          "_allowed": "The allowlist status to be set for the source chain.",
          "_sourceChainSelector": "The selector of the source chain to be updated."
        }
      },
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Extremely important to ensure only router calls this.",
        "params": {
          "any2EvmMessage": "The message to process."
        }
      },
      "getFailedMessagesIds()": {
        "details": "Iterates over the `s_failedMessages` map, collecting all keys.",
        "returns": {
          "ids": "An array of bytes32 containing the IDs of failed messages from the `s_failedMessages` map."
        }
      },
      "getRouter()": {
        "returns": {
          "_0": "i_router address"
        }
      },
      "processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Transfers specified token amounts to the owner of this contract. This function must be external because of the  try/catch for error handling. It uses the `onlySelf`: can only be called from the contract.",
        "params": {
          "any2EvmMessage": "Received CCIP message."
        }
      },
      "retryFailedMessage(bytes32,address)": {
        "details": "This function is only callable by the contract owner. It changes the status of the message from 'failed' to 'resolved' to prevent reentry and multiple retries of the same message.",
        "params": {
          "messageId": "The unique identifier of the failed message.",
          "tokenReceiver": "The address to which the tokens will be sent."
        }
      },
      "setSimRevert(bool)": {
        "details": "This function is only callable by the contract owner.",
        "params": {
          "simRevert": "If `true`, simulates a revert condition; if `false`, disables the simulation."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interfaceId to check"
        },
        "returns": {
          "_0": "true if the interfaceId is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "allowlistSender(address,bool)": {
        "notice": "This function can only be called by the owner."
      },
      "allowlistSourceChain(uint64,bool)": {
        "notice": "This function can only be called by the owner."
      },
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "The entrypoint for the CCIP router to call. This function should never revert, all errors should be handled internally in this contract."
      },
      "getFailedMessagesIds()": {
        "notice": "Retrieves the IDs of failed messages from the `s_failedMessages` map."
      },
      "getRouter()": {
        "notice": "Return the current router"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "Serves as the entry point for this contract to process incoming messages."
      },
      "retryFailedMessage(bytes32,address)": {
        "notice": "Allows the owner to retry a failed message in order to unblock the associated tokens."
      },
      "setSimRevert(bool)": {
        "notice": "Allows the owner to toggle simulation of reversion for testing purposes."
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 supports an interfaceId"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "notice": "THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2955,
        "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
        "label": "s_simRevert",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2958,
        "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
        "label": "s_failedMessages",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Bytes32ToUintMap)2079_storage"
      },
      {
        "astId": 2962,
        "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
        "label": "allowlistedSourceChains",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 2966,
        "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
        "label": "allowlistedSenders",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2971,
        "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
        "label": "s_messageContents",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Any2EVMMessage)334_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EVMTokenAmount)321_storage)dyn_storage": {
        "base": "t_struct(EVMTokenAmount)321_storage",
        "encoding": "dynamic_array",
        "label": "struct Client.EVMTokenAmount[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Any2EVMMessage)334_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Client.Any2EVMMessage)",
        "numberOfBytes": "32",
        "value": "t_struct(Any2EVMMessage)334_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Any2EVMMessage)334_storage": {
        "encoding": "inplace",
        "label": "struct Client.Any2EVMMessage",
        "members": [
          {
            "astId": 323,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "messageId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 325,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "sourceChainSelector",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 327,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 329,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 333,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "destTokenAmounts",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(EVMTokenAmount)321_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Bytes32Set)2467_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2466,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2273_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)1156_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 1151,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2467_storage"
          },
          {
            "astId": 1155,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32ToUintMap)2079_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToUintMap",
        "members": [
          {
            "astId": 2078,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)1156_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(EVMTokenAmount)321_storage": {
        "encoding": "inplace",
        "label": "struct Client.EVMTokenAmount",
        "members": [
          {
            "astId": 318,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 320,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2273_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2268,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2272,
            "contract": "contracts/CrossChainReceiver.sol:CrossChainReceiver",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}